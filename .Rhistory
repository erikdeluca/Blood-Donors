),
class_age = cut(age,
breaks = c(seq(0, 70, by = 10), max(age)),
dig.lab = 3,
include.lowest = TRUE
),
.before = birth_year
) -> data
data_with_zeros |>
distinct() |>
mutate(
class_year = cut(birth_year,
breaks = seq(1900, 2010, by = 10),
dig.lab = 4,
include.lowest = TRUE
),
class_age = cut(age,
breaks = c(seq(0, 70, by = 10), max(age)),
dig.lab = 3,
include.lowest = TRUE
),
.before = birth_year
) -> data_with_zeros
data |>
summarise(
number_of_donations = sum(number_of_donations),
.by = -c(number_of_donations, unique_number)
) -> summarised_data
data |>
filter(
year == max(year) | year == min(year)
) |>
ggplot(aes(x = gender, y = age, fill = gender)) +
geom_violin() +
facet_wrap(~year) +
labs(
title = "Donor age distribution in 2009 and 2023 by gender"
)
data |>
select(class_year, donation_type) |>
tbl_summary(
by = donation_type
) |>
add_overall()
data |>
reframe(
class_year, donor_class,
.by = unique_number
) |>
select(class_year, donor_class) |>
tbl_summary(
by = donor_class
) |>
add_overall()
data |>
tabyl(number_of_donations, gender) |>
adorn_percentages(denominator = "col") |>
adorn_pct_formatting()
data |>
tabyl(number_of_donations, donor_class) |>
adorn_percentages(denominator = "col") |>
adorn_pct_formatting()
data |>
filter(
donation_type == "SANGUE",
birth_year > 1930
) |>
summarise(
donations = sum(number_of_donations),
.by = c(class_year, year)
) |>
ggplot(aes(year, donations, color = class_year, group = class_year)) +
geom_line() +
scale_color_brewer() +
labs(
title = "Number of donations by year and class of birth years"
)
data |>
filter(
donation_type == "SANGUE",
birth_year > 1930
) |>
summarise(
donations = sum(number_of_donations),
.by = c(class_age, year)
) |>
ggplot(aes(year, donations, color = class_age, group = class_age)) +
geom_line() +
scale_color_brewer(direction = -1) +
labs(
title = "Number of donations by year and class of birth years"
)
data |>
summarise(
donations = sum(number_of_donations),
.by = c(donation_type, year)
) |>
ggplot(aes(year, donations, color = donation_type, group = donation_type)) +
geom_line() +
geom_smooth(linetype = "dashed",
alpha = .15,
size = .7
) +
scale_color_brewer(type = "qual", palette = 2) +
labs(
title = "Number of donations by year and donation type"
)
data |>
summarise(
donations = sum(number_of_donations),
.by = c(donor_class, year)
) |>
ggplot(aes(year, donations, color = donor_class, group = donor_class)) +
geom_line() +
geom_smooth(linetype = "dashed",
alpha = .15,
size = .7
) +
scale_color_brewer(type = "qual", palette = 2) +
labs(
title = "Number of donations by year and donor class"
)
residenti <- read_csv(here("data", "residenti_Trieste_e_Gorizia.csv"))
residenti |>
filter(
Sesso != "totale"
) |>
rename(
age = EtÃ ,
gender = Sesso,
year = TIME,
population = Value,
) |>
summarise(
across(population, sum),
.by = c(age, gender, year)
) |>
mutate(
age = str_extract(age, "[:digit:]*") |> as.numeric(),
gender = case_when(
gender == "maschi" ~ "M",
gender == "femmine" ~ "F",
T ~ NA
)
) -> residenti
lifecontingencies::demoIta |>
transmute(
age = X,
maschi = SIM02,
femmine = SIF02,
across(c(maschi, femmine), \(x) x / lag(x, default = 1e5), .names = "{col}_px")
) |>
pivot_longer(ends_with("px"), names_to = "gender", values_to = "px") |>
# select(-maschi, - femmine) |>
mutate(
gender = case_when(
gender == "maschi_px" ~ "M",
gender == "femmine_px" ~ "F",
T ~ NA
)
) -> life_table
residenti |>
add_row(year = 2009:2018, .before = 1) |>
complete(age, gender, year) |>
filter(!if_any(c(age, gender), is.na)) |>
left_join(life_table, by = c("age", "gender")) |>
arrange(-year, age) |>
filter(gender == "M") |>
pivot_wider(names_from = year, values_from = population, names_prefix = "y_") |>
mutate(
y_2018 = lead(y_2019, default = 0) * maschi / lead(maschi, default = 0),
y_2017 = lead(y_2019, n = 2, default = 0) * maschi / lead(maschi, default = 0),
y_2016 = lead(y_2019, n = 3, default = 0) * maschi / lead(maschi, default = 0),
)
filled_residenti <-
residenti |>
add_row(year = 2009:2018, .before = 1) |>
complete(age, gender, year) |>
filter(!if_any(c(age, gender), is.na)) |>
left_join(life_table, by = c("age", "gender")) |>
arrange(-year, age) |>
pivot_wider(names_from = gender, values_from = c(px, population)) |>
pivot_wider(names_from = year, values_from = c(population_M, population_F))
years <- 2018:2009
gender <- "M"
filled_residenti <- reduce(years, function(df, year) {
col <- paste0("population_", c("F", "M"), "_", year)
col_19 <- paste0("population_", c("F", "M"), "_2019")
df |>
mutate(
!!sym(col[1]) := lead(!!sym(col_19[1]), 2019 - year, 0) * femmine / lead(femmine, 2019 - year, 0),
!!sym(col[2]) := lead(!!sym(col_19[2]), 2019 - year, 0) * maschi / lead(maschi, 2019 - year, 0)
)
}, .init = filled_residenti) |>
mutate(across(starts_with("population"), round))
filled_residenti
filled_residenti |>
select(age, starts_with("population")) |>
pivot_longer(starts_with("population"), values_to = "population") |>
separate(name, sep = "_", into = c("pop", "gender", "year")) |>
select(-pop) |>
mutate(across(year, as.numeric)) -> residenti
data |>
left_join(residenti, by = c("gender", "year", "age")) |>
filter(year %% 4 == 3) |>
summarise(
ratio_donors = n() / first(population),
.by = c(gender, year, age)
) |>
filter(age < 75) |>
ggplot(aes(x = age, y = ratio_donors, fill = gender, alpha = year)) +
geom_col() +
facet_grid(rows = vars(year), cols = vars(gender)) +
scale_y_continuous(labels = scales::percent_format()) +
scale_alpha_continuous(range = c(.4, 1)) +
labs(
title = "Donors population ratio by gender and year"
) +
theme(legend.position = "none")
data |>
left_join(residenti, by = c("gender", "year", "age")) |>
reframe(
n = n(),
.by = c(gender, year, age, class_age, population)
) |>
summarise(
ratio_donors = sum(n) / sum(population),
.by = c(year, gender, class_age)
) |>
ggplot(aes(x = year, y = ratio_donors, color = class_age)) +
geom_line() +
facet_grid(cols = vars(gender)) +
scale_y_continuous(labels = scales::percent_format()) +
labs(
title = "Donors population ratio by gender and year"
)
#| fig-width: 6
#| fig-height: 8
map(
c("donor_class", "donation_type", "gender"),
\(x) {
data |>
summarise(
n = n(),
.by = c(!!sym(x), number_of_donations)
) |>
ggplot(aes(x = number_of_donations, y = n, fill = !!sym(x))) +
geom_col(position = "dodge") +
scale_x_continuous(limits = c(0, 6)) +
scale_y_continuous(labels = scales::number_format()) +
labs(y = "",
x = "")
}
) |>
reduce(`/`)
#| fig-width: 6
#| fig-height: 8
map(
c("donor_class", "donation_type", "gender"),
\(x) {
data |>
filter(number_of_donations < 6) |>
summarise(
n = n(),
.by = c(!!sym(x), number_of_donations)
) |>
# mutate(n = n / n(), .by = !!sym(x)) |>
ggplot(aes(x = number_of_donations, y = n, fill = !!sym(x))) +
geom_col() +
facet_wrap(vars(!!sym(x))) +
scale_y_continuous(labels = scales::number_format()) +
labs(y = "",
x = "",
subtitle = x
) +
theme(legend.position = "none")
}
) |>
reduce(`/`)
data |>
arrange(unique_number, age) |>
mutate(
total_donations = cumsum(number_of_donations),
.by = unique_number,
.after = number_of_donations
) -> data
data |>
slice_max(total_donations, by = unique_number) |>
filter(age < 70, age > 15) |>
ggplot(aes(x = age, y = total_donations)) +
# geom_point(position = "jitter") +
geom_hex(aes(fill = class_year), alpha = .4) +
geom_smooth(aes(color = class_year), linetype = "dashed", method = "lm") +
guides(color = "none")
data |>
ggplot(aes(x = total_donations, y = after_stat(density))) +
geom_histogram(bins = 50) +
scale_x_sqrt(breaks = c(0, 1, 2, 5, 10, 25, 50, 100, 200)) +
labs(
title = "Distribuition of total donations",
subtitle = "The x axis is scaled with a square root transformation"
)
data |>
slice_max(total_donations, by = unique_number) -> data_model
data_model |>
ggplot(aes(x = total_donations, y = ..density..)) +
geom_histogram(bins = 50) +
scale_x_sqrt(breaks = c(0, 1, 2, 5, 10, 25, 50, 100, 200)) +
labs(
title = "Distribuition of total donations in the last year of donations of each donator",
subtitle = "The x axis is scaled with a square root transformation"
)
mod <- glm(total_donations ~ age + class_age + first_donation_year + gender,
data = data_model |> filter(total_donations < 100),
family = poisson(link = "log"),
# family = Gamma(link = "inverse"),
)
summary(mod)
plot(mod)
mod <- glm(total_donations ~ age + class_age + first_donation_year + gender,
data = data_model |> filter(total_donations < 100),
family = quasipoisson(link = "log"),
# family = Gamma(link = "inverse"),
)
summary(mod)
plot(mod)
library(statmod)
library(tweedie)
library(doParallel)
data_filtered <- data_model |> filter(total_donations < 100)
data_filtered$gender <- factor(data_filtered$gender)
data_filtered$class_age <- factor(data_filtered$class_age)
# Set up parallel backend
numCores <- detectCores() - 1  # Use one less than the total cores
cl <- makeCluster(numCores)
registerDoParallel(cl)
# Function to estimate power parameter in parallel
tweedie_tuning <- foreach(p = seq(.5, 3, length.out = numCores), .combine = c, .packages = 'tweedie') %dopar% {
tweedie.profile(
total_donations ~ class_age + gender,
data = data_filtered |> dplyr::slice_sample(n = 1e3, by = c(class_age, gender)),
p.vec = p,
do.plot = FALSE
)
}
# Stop the cluster after usage
stopCluster(cl)
registerDoSEQ()
# Assuming `tweedie_tuning` is your original list
tweedie_tuning_unlisted <- tweedie_tuning |>
unlist(use.names = TRUE)
# Convert to a data frame
tweedie_tuning_df <- tibble(
name = names(tweedie_tuning_unlisted),
value = tweedie_tuning_unlisted
)
# Group by name and create a wide format data frame
tweedie_tuning_wide <- tweedie_tuning_df |>
group_by(name) |>
mutate(row = row_number()) |>
pivot_wider(names_from = name, values_from = value) |>
select(-row)
tweedie_tuning_wide |>
mutate(across(c(p, phi), as.numeric)) |>
slice_max(phi) |>
pull(p) -> best_p
best_p
best_p <- 1.19
mod_tweedie <- glm(total_donations ~ age + class_age + first_donation_year + gender,
data = data_filtered,
family = tweedie(var.power = best_p, link.power = 0))
summary(mod_tweedie)
plot(mod_tweedie)
mod_gamma <- glm(total_donations ~ age + class_age + first_donation_year + gender,
data = data_model |> filter(total_donations < 100),
family = Gamma(link = "inverse"),
)
summary(mod_gamma)
plot(mod_gamma)
library(tidymodels)
mod_gamma |>
tidy() |>
ggplot(aes(y = term, x = estimate)) +
geom_point(color = "springgreen") +
geom_vline(xintercept = 0, color = "tomato") +
geom_errorbar(aes(xmin = estimate - 1.96 * std.error, xmax = estimate + 1.96 * std.error),
width = .2)
ggstatsplot::ggcoefstats(mod_gamma)
data |>
filter(donation_type == 'SANGUE', donor_class == 'P') |>
pivot_wider(
names_from = year,
names_prefix = "y_",
values_from = number_of_donations,
id_cols = unique_number,
values_fill = 0
) |>
# take who has donated in the last two year
filter(if_any(c(y_2022, y_2021), \(x) x > 0)) -> donations
donations
data |>
reframe(
class_year,
birth_year,
first_donation_year,
gender,
.by = unique_number
) |>
distinct() -> sociodemographic
right_join(
sociodemographic,
donations,
by = "unique_number"
) -> recent_donations
recent_donations
recent_donations |>
summarise(
n = n(),
.by = c(class_year, y_2022)
) |>
ggplot(aes(x = y_2022, y = class_year, fill = n)) +
geom_tile()
recent_donations |>
summarise(
n = n(),
.by = c(birth_year, y_2022)
) |>
ggplot(aes(x = y_2022, y = birth_year, z = n)) +
geom_contour_filled()
recent_donations |>
ggplot(aes(x = y_2022)) +
geom_histogram()
recent_donations |>
select(paste0("y_", 2010:2023)) |>
cor() |>
as_tibble() |>
bind_cols(var_1 = paste0("y_", 2010:2023)) |>
pivot_longer(-var_1, names_to = "var_2", values_to = "correlation") |>
ggplot(aes(x = var_1, y = var_2, fill = correlation)) +
geom_tile(color = "white") +
scale_fill_gradient2(low = "blue", high = "red", mid = "white",
midpoint = 0, limit = c(-1, 1), space = "Lab",
name="Pearson\nCorrelation") +
theme_minimal() +
theme(axis.text.x = element_text(angle = 45, vjust = 1,
size = 12, hjust = 1)) +
coord_fixed()
glm(y_2019 ~ y_2018 + y_2017 + y_2016 + gender + birth_year * first_donation_year, data = recent_donations,
family = quasipoisson()
) -> model_pre_covid
model_pre_covid |>
summary()
plot(model_pre_covid)
gtsummary::tbl_regression(
model_pre_covid,
exponentiate = T
)
donations |>
pivot_longer()
donations |>
pivot_longer(everything())
donations |>
select(-unique_number) |>
pivot_longer(everything())
donations |>
select(-unique_number) |>
pivot_longer(everything()) |>
ggplot(aes(x = value)) +
geom_histogram(bins = 50)
donations |>
select(-unique_number) |>
pivot_longer(everything()) |>
tabyl(value)
donations |>
select(-unique_number) |>
pivot_longer(everything()) |>
tabyl(value) |>
adorn_percentages(denominator = "col")
donations |>
select(-unique_number) |>
pivot_longer(everything()) |>
tabyl(value) |>
adorn_percentages(denominator = "col") |>
adorn_pct_formatting()
Sys.getenv()
cat(">>>> TMP  =", Sys.getenv("TMP"),  "\n")
cat(">>>> TEMP =", Sys.getenv("TEMP"), "\n")
cat(">>>> TMPDIR =", Sys.getenv("TMPDIR"), "\n")
Sys.getenv()
rmarkdown::find_pandoc()
if (!rmarkdown::pandoc_available(error = FALSE)) {
# When FALSE, this means no Pandoc is found by rmarkdown, not even on PATH
# In that case we configure rmarkdown to use Quarto bundled version
quarto_bin_path <- Sys.getenv("QUARTO_BIN_PATH", NA_character_)
# Checking env var to be safe, but should always set by Quarto
if (!is.na(quarto_bin_path)) {
pandoc_dir <- normalizePath(file.path(quarto_bin_path, "tools"))
invisible(rmarkdown::find_pandoc(dir = pandoc_dir))
}
}
rmarkdown::pandoc_available()
dir <- "~"
dir_expanded <- path.expand(dir)
rmarkdown:::dir_exists(dir_expanded)
dir.exists(dir_expanded)
fs::dir_exists(dir_expanded)
Sys.getenv("QUARTO_BIN_PATH")
# should be something like "C:/Users/â¦/Quarto/bin"
Sys.setenv(QUARTO_BIN_PATH = "C:/Users/<user>/AppData/Local/Programs/Quarto/bin")
rmarkdown::find_pandoc(dir = file.path(Sys.getenv("QUARTO_BIN_PATH"), "tools"))
rmarkdown::pandoc_available()
q()
